// Code generated by mockery v2.44.1. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/Alwanly/go-codebase/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, username
func (_m *MockIRepository) Login(ctx context.Context, username string) (*model.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIRepository_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockIRepository_Expecter) Login(ctx interface{}, username interface{}) *MockIRepository_Login_Call {
	return &MockIRepository_Login_Call{Call: _e.mock.On("Login", ctx, username)}
}

func (_c *MockIRepository_Login_Call) Run(run func(ctx context.Context, username string)) *MockIRepository_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIRepository_Login_Call) Return(_a0 *model.User, _a1 error) *MockIRepository_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_Login_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *MockIRepository_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, _a1
func (_m *MockIRepository) Register(ctx context.Context, _a1 *model.User) (*model.User, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIRepository_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *model.User
func (_e *MockIRepository_Expecter) Register(ctx interface{}, _a1 interface{}) *MockIRepository_Register_Call {
	return &MockIRepository_Register_Call{Call: _e.mock.On("Register", ctx, _a1)}
}

func (_c *MockIRepository_Register_Call) Run(run func(ctx context.Context, _a1 *model.User)) *MockIRepository_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockIRepository_Register_Call) Return(_a0 *model.User, _a1 error) *MockIRepository_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_Register_Call) RunAndReturn(run func(context.Context, *model.User) (*model.User, error)) *MockIRepository_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
