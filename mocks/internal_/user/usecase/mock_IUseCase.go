// Code generated by mockery v2.44.1. DO NOT EDIT.

package usecase

import (
	context "context"

	schema "github.com/Alwanly/go-codebase/internal/user/schema"
	mock "github.com/stretchr/testify/mock"

	wrapper "github.com/Alwanly/go-codebase/pkg/wrapper"
)

// MockIUseCase is an autogenerated mock type for the IUseCase type
type MockIUseCase struct {
	mock.Mock
}

type MockIUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUseCase) EXPECT() *MockIUseCase_Expecter {
	return &MockIUseCase_Expecter{mock: &_m.Mock}
}

// Auth provides a mock function with given fields: ctx, req
func (_m *MockIUseCase) Auth(ctx context.Context, req *schema.AuthLoginRequest) wrapper.JSONResult {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 wrapper.JSONResult
	if rf, ok := ret.Get(0).(func(context.Context, *schema.AuthLoginRequest) wrapper.JSONResult); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(wrapper.JSONResult)
	}

	return r0
}

// MockIUseCase_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type MockIUseCase_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
//   - ctx context.Context
//   - req *schema.AuthLoginRequest
func (_e *MockIUseCase_Expecter) Auth(ctx interface{}, req interface{}) *MockIUseCase_Auth_Call {
	return &MockIUseCase_Auth_Call{Call: _e.mock.On("Auth", ctx, req)}
}

func (_c *MockIUseCase_Auth_Call) Run(run func(ctx context.Context, req *schema.AuthLoginRequest)) *MockIUseCase_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*schema.AuthLoginRequest))
	})
	return _c
}

func (_c *MockIUseCase_Auth_Call) Return(_a0 wrapper.JSONResult) *MockIUseCase_Auth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUseCase_Auth_Call) RunAndReturn(run func(context.Context, *schema.AuthLoginRequest) wrapper.JSONResult) *MockIUseCase_Auth_Call {
	_c.Call.Return(run)
	return _c
}

// Profile provides a mock function with given fields: _a0, _a1
func (_m *MockIUseCase) Profile(_a0 context.Context, _a1 *schema.ProfileRequest) wrapper.JSONResult {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Profile")
	}

	var r0 wrapper.JSONResult
	if rf, ok := ret.Get(0).(func(context.Context, *schema.ProfileRequest) wrapper.JSONResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(wrapper.JSONResult)
	}

	return r0
}

// MockIUseCase_Profile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Profile'
type MockIUseCase_Profile_Call struct {
	*mock.Call
}

// Profile is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *schema.ProfileRequest
func (_e *MockIUseCase_Expecter) Profile(_a0 interface{}, _a1 interface{}) *MockIUseCase_Profile_Call {
	return &MockIUseCase_Profile_Call{Call: _e.mock.On("Profile", _a0, _a1)}
}

func (_c *MockIUseCase_Profile_Call) Run(run func(_a0 context.Context, _a1 *schema.ProfileRequest)) *MockIUseCase_Profile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*schema.ProfileRequest))
	})
	return _c
}

func (_c *MockIUseCase_Profile_Call) Return(_a0 wrapper.JSONResult) *MockIUseCase_Profile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUseCase_Profile_Call) RunAndReturn(run func(context.Context, *schema.ProfileRequest) wrapper.JSONResult) *MockIUseCase_Profile_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, req
func (_m *MockIUseCase) Register(ctx context.Context, req *schema.AuthRegisterRequest) wrapper.JSONResult {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 wrapper.JSONResult
	if rf, ok := ret.Get(0).(func(context.Context, *schema.AuthRegisterRequest) wrapper.JSONResult); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(wrapper.JSONResult)
	}

	return r0
}

// MockIUseCase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIUseCase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - req *schema.AuthRegisterRequest
func (_e *MockIUseCase_Expecter) Register(ctx interface{}, req interface{}) *MockIUseCase_Register_Call {
	return &MockIUseCase_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *MockIUseCase_Register_Call) Run(run func(ctx context.Context, req *schema.AuthRegisterRequest)) *MockIUseCase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*schema.AuthRegisterRequest))
	})
	return _c
}

func (_c *MockIUseCase_Register_Call) Return(_a0 wrapper.JSONResult) *MockIUseCase_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUseCase_Register_Call) RunAndReturn(run func(context.Context, *schema.AuthRegisterRequest) wrapper.JSONResult) *MockIUseCase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUseCase creates a new instance of MockIUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUseCase {
	mock := &MockIUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
