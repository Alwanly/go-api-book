// Code generated by mockery v2.44.1. DO NOT EDIT.

package authentication

import (
	authentication "github.com/Alwanly/go-codebase/pkg/authentication"
	mock "github.com/stretchr/testify/mock"
)

// MockIJwtService is an autogenerated mock type for the IJwtService type
type MockIJwtService struct {
	mock.Mock
}

type MockIJwtService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIJwtService) EXPECT() *MockIJwtService_Expecter {
	return &MockIJwtService_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: claims
func (_m *MockIJwtService) GenerateToken(claims authentication.JWTClaims) (string, error) {
	ret := _m.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(authentication.JWTClaims) (string, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(authentication.JWTClaims) string); ok {
		r0 = rf(claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(authentication.JWTClaims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwtService_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockIJwtService_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - claims authentication.JWTClaims
func (_e *MockIJwtService_Expecter) GenerateToken(claims interface{}) *MockIJwtService_GenerateToken_Call {
	return &MockIJwtService_GenerateToken_Call{Call: _e.mock.On("GenerateToken", claims)}
}

func (_c *MockIJwtService_GenerateToken_Call) Run(run func(claims authentication.JWTClaims)) *MockIJwtService_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(authentication.JWTClaims))
	})
	return _c
}

func (_c *MockIJwtService_GenerateToken_Call) Return(_a0 string, _a1 error) *MockIJwtService_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwtService_GenerateToken_Call) RunAndReturn(run func(authentication.JWTClaims) (string, error)) *MockIJwtService_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToken provides a mock function with given fields: token
func (_m *MockIJwtService) ParseToken(token string) (*authentication.JWTClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *authentication.JWTClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*authentication.JWTClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *authentication.JWTClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authentication.JWTClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwtService_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type MockIJwtService_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - token string
func (_e *MockIJwtService_Expecter) ParseToken(token interface{}) *MockIJwtService_ParseToken_Call {
	return &MockIJwtService_ParseToken_Call{Call: _e.mock.On("ParseToken", token)}
}

func (_c *MockIJwtService_ParseToken_Call) Run(run func(token string)) *MockIJwtService_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIJwtService_ParseToken_Call) Return(_a0 *authentication.JWTClaims, _a1 error) *MockIJwtService_ParseToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwtService_ParseToken_Call) RunAndReturn(run func(string) (*authentication.JWTClaims, error)) *MockIJwtService_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: token
func (_m *MockIJwtService) RefreshToken(token string) (string, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwtService_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockIJwtService_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - token string
func (_e *MockIJwtService_Expecter) RefreshToken(token interface{}) *MockIJwtService_RefreshToken_Call {
	return &MockIJwtService_RefreshToken_Call{Call: _e.mock.On("RefreshToken", token)}
}

func (_c *MockIJwtService_RefreshToken_Call) Run(run func(token string)) *MockIJwtService_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIJwtService_RefreshToken_Call) Return(_a0 string, _a1 error) *MockIJwtService_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwtService_RefreshToken_Call) RunAndReturn(run func(string) (string, error)) *MockIJwtService_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: token
func (_m *MockIJwtService) ValidateToken(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIJwtService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockIJwtService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token string
func (_e *MockIJwtService_Expecter) ValidateToken(token interface{}) *MockIJwtService_ValidateToken_Call {
	return &MockIJwtService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *MockIJwtService_ValidateToken_Call) Run(run func(token string)) *MockIJwtService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIJwtService_ValidateToken_Call) Return(_a0 error) *MockIJwtService_ValidateToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIJwtService_ValidateToken_Call) RunAndReturn(run func(string) error) *MockIJwtService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIJwtService creates a new instance of MockIJwtService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIJwtService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIJwtService {
	mock := &MockIJwtService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
