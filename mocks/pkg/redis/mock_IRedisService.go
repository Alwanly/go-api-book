// Code generated by mockery v2.44.1. DO NOT EDIT.

package redis

import (
	mock "github.com/stretchr/testify/mock"

	v9 "github.com/go-redis/redis/v9"
)

// MockIRedisService is an autogenerated mock type for the IRedisService type
type MockIRedisService struct {
	mock.Mock
}

type MockIRedisService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRedisService) EXPECT() *MockIRedisService_Expecter {
	return &MockIRedisService_Expecter{mock: &_m.Mock}
}

// CloseRedis provides a mock function with given fields:
func (_m *MockIRedisService) CloseRedis() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseRedis")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRedisService_CloseRedis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseRedis'
type MockIRedisService_CloseRedis_Call struct {
	*mock.Call
}

// CloseRedis is a helper method to define mock.On call
func (_e *MockIRedisService_Expecter) CloseRedis() *MockIRedisService_CloseRedis_Call {
	return &MockIRedisService_CloseRedis_Call{Call: _e.mock.On("CloseRedis")}
}

func (_c *MockIRedisService_CloseRedis_Call) Run(run func()) *MockIRedisService_CloseRedis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRedisService_CloseRedis_Call) Return(_a0 error) *MockIRedisService_CloseRedis_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRedisService_CloseRedis_Call) RunAndReturn(run func() error) *MockIRedisService_CloseRedis_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields:
func (_m *MockIRedisService) GetTransaction() (v9.Pipeliner, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 v9.Pipeliner
	var r1 error
	if rf, ok := ret.Get(0).(func() (v9.Pipeliner, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() v9.Pipeliner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v9.Pipeliner)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRedisService_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type MockIRedisService_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
func (_e *MockIRedisService_Expecter) GetTransaction() *MockIRedisService_GetTransaction_Call {
	return &MockIRedisService_GetTransaction_Call{Call: _e.mock.On("GetTransaction")}
}

func (_c *MockIRedisService_GetTransaction_Call) Run(run func()) *MockIRedisService_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRedisService_GetTransaction_Call) Return(_a0 v9.Pipeliner, _a1 error) *MockIRedisService_GetTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRedisService_GetTransaction_Call) RunAndReturn(run func() (v9.Pipeliner, error)) *MockIRedisService_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// PingRedis provides a mock function with given fields:
func (_m *MockIRedisService) PingRedis() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PingRedis")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIRedisService_PingRedis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingRedis'
type MockIRedisService_PingRedis_Call struct {
	*mock.Call
}

// PingRedis is a helper method to define mock.On call
func (_e *MockIRedisService_Expecter) PingRedis() *MockIRedisService_PingRedis_Call {
	return &MockIRedisService_PingRedis_Call{Call: _e.mock.On("PingRedis")}
}

func (_c *MockIRedisService_PingRedis_Call) Run(run func()) *MockIRedisService_PingRedis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRedisService_PingRedis_Call) Return(_a0 bool) *MockIRedisService_PingRedis_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRedisService_PingRedis_Call) RunAndReturn(run func() bool) *MockIRedisService_PingRedis_Call {
	_c.Call.Return(run)
	return _c
}

// PingRedisWithError provides a mock function with given fields:
func (_m *MockIRedisService) PingRedisWithError() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PingRedisWithError")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRedisService_PingRedisWithError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingRedisWithError'
type MockIRedisService_PingRedisWithError_Call struct {
	*mock.Call
}

// PingRedisWithError is a helper method to define mock.On call
func (_e *MockIRedisService_Expecter) PingRedisWithError() *MockIRedisService_PingRedisWithError_Call {
	return &MockIRedisService_PingRedisWithError_Call{Call: _e.mock.On("PingRedisWithError")}
}

func (_c *MockIRedisService_PingRedisWithError_Call) Run(run func()) *MockIRedisService_PingRedisWithError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRedisService_PingRedisWithError_Call) Return(_a0 bool, _a1 error) *MockIRedisService_PingRedisWithError_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRedisService_PingRedisWithError_Call) RunAndReturn(run func() (bool, error)) *MockIRedisService_PingRedisWithError_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRedisService creates a new instance of MockIRedisService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRedisService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRedisService {
	mock := &MockIRedisService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
