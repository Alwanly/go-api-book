// Code generated by mockery v2.44.1. DO NOT EDIT.

package database

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MockIDBService is an autogenerated mock type for the IDBService type
type MockIDBService struct {
	mock.Mock
}

type MockIDBService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDBService) EXPECT() *MockIDBService_Expecter {
	return &MockIDBService_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function with given fields: c
func (_m *MockIDBService) BeginTransaction(c context.Context) (context.Context, *gorm.DB) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 context.Context
	var r1 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, *gorm.DB)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *gorm.DB); ok {
		r1 = rf(c)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	return r0, r1
}

// MockIDBService_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockIDBService_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - c context.Context
func (_e *MockIDBService_Expecter) BeginTransaction(c interface{}) *MockIDBService_BeginTransaction_Call {
	return &MockIDBService_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", c)}
}

func (_c *MockIDBService_BeginTransaction_Call) Run(run func(c context.Context)) *MockIDBService_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIDBService_BeginTransaction_Call) Return(_a0 context.Context, _a1 *gorm.DB) *MockIDBService_BeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDBService_BeginTransaction_Call) RunAndReturn(run func(context.Context) (context.Context, *gorm.DB)) *MockIDBService_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockIDBService) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIDBService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockIDBService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockIDBService_Expecter) Close() *MockIDBService_Close_Call {
	return &MockIDBService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockIDBService_Close_Call) Run(run func()) *MockIDBService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIDBService_Close_Call) Return(_a0 error) *MockIDBService_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDBService_Close_Call) RunAndReturn(run func() error) *MockIDBService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CommitTransaction provides a mock function with given fields: c
func (_m *MockIDBService) CommitTransaction(c context.Context) *gorm.DB {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockIDBService_CommitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitTransaction'
type MockIDBService_CommitTransaction_Call struct {
	*mock.Call
}

// CommitTransaction is a helper method to define mock.On call
//   - c context.Context
func (_e *MockIDBService_Expecter) CommitTransaction(c interface{}) *MockIDBService_CommitTransaction_Call {
	return &MockIDBService_CommitTransaction_Call{Call: _e.mock.On("CommitTransaction", c)}
}

func (_c *MockIDBService_CommitTransaction_Call) Run(run func(c context.Context)) *MockIDBService_CommitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIDBService_CommitTransaction_Call) Return(_a0 *gorm.DB) *MockIDBService_CommitTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDBService_CommitTransaction_Call) RunAndReturn(run func(context.Context) *gorm.DB) *MockIDBService_CommitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Defer provides a mock function with given fields: c
func (_m *MockIDBService) Defer(c context.Context) {
	_m.Called(c)
}

// MockIDBService_Defer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Defer'
type MockIDBService_Defer_Call struct {
	*mock.Call
}

// Defer is a helper method to define mock.On call
//   - c context.Context
func (_e *MockIDBService_Expecter) Defer(c interface{}) *MockIDBService_Defer_Call {
	return &MockIDBService_Defer_Call{Call: _e.mock.On("Defer", c)}
}

func (_c *MockIDBService_Defer_Call) Run(run func(c context.Context)) *MockIDBService_Defer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIDBService_Defer_Call) Return() *MockIDBService_Defer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIDBService_Defer_Call) RunAndReturn(run func(context.Context)) *MockIDBService_Defer_Call {
	_c.Call.Return(run)
	return _c
}

// GetLockType provides a mock function with given fields: c
func (_m *MockIDBService) GetLockType(c context.Context) *string {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetLockType")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context) *string); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// MockIDBService_GetLockType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLockType'
type MockIDBService_GetLockType_Call struct {
	*mock.Call
}

// GetLockType is a helper method to define mock.On call
//   - c context.Context
func (_e *MockIDBService_Expecter) GetLockType(c interface{}) *MockIDBService_GetLockType_Call {
	return &MockIDBService_GetLockType_Call{Call: _e.mock.On("GetLockType", c)}
}

func (_c *MockIDBService_GetLockType_Call) Run(run func(c context.Context)) *MockIDBService_GetLockType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIDBService_GetLockType_Call) Return(_a0 *string) *MockIDBService_GetLockType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDBService_GetLockType_Call) RunAndReturn(run func(context.Context) *string) *MockIDBService_GetLockType_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: c
func (_m *MockIDBService) GetTransaction(c context.Context) *gorm.DB {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockIDBService_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type MockIDBService_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - c context.Context
func (_e *MockIDBService_Expecter) GetTransaction(c interface{}) *MockIDBService_GetTransaction_Call {
	return &MockIDBService_GetTransaction_Call{Call: _e.mock.On("GetTransaction", c)}
}

func (_c *MockIDBService_GetTransaction_Call) Run(run func(c context.Context)) *MockIDBService_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIDBService_GetTransaction_Call) Return(_a0 *gorm.DB) *MockIDBService_GetTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDBService_GetTransaction_Call) RunAndReturn(run func(context.Context) *gorm.DB) *MockIDBService_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields:
func (_m *MockIDBService) Ping() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIDBService_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockIDBService_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockIDBService_Expecter) Ping() *MockIDBService_Ping_Call {
	return &MockIDBService_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockIDBService_Ping_Call) Run(run func()) *MockIDBService_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIDBService_Ping_Call) Return(_a0 bool) *MockIDBService_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDBService_Ping_Call) RunAndReturn(run func() bool) *MockIDBService_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// RollbackTransaction provides a mock function with given fields: c
func (_m *MockIDBService) RollbackTransaction(c context.Context) *gorm.DB {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTransaction")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockIDBService_RollbackTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollbackTransaction'
type MockIDBService_RollbackTransaction_Call struct {
	*mock.Call
}

// RollbackTransaction is a helper method to define mock.On call
//   - c context.Context
func (_e *MockIDBService_Expecter) RollbackTransaction(c interface{}) *MockIDBService_RollbackTransaction_Call {
	return &MockIDBService_RollbackTransaction_Call{Call: _e.mock.On("RollbackTransaction", c)}
}

func (_c *MockIDBService_RollbackTransaction_Call) Run(run func(c context.Context)) *MockIDBService_RollbackTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIDBService_RollbackTransaction_Call) Return(_a0 *gorm.DB) *MockIDBService_RollbackTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDBService_RollbackTransaction_Call) RunAndReturn(run func(context.Context) *gorm.DB) *MockIDBService_RollbackTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// SetShareLockType provides a mock function with given fields: c
func (_m *MockIDBService) SetShareLockType(c context.Context) context.Context {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for SetShareLockType")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockIDBService_SetShareLockType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetShareLockType'
type MockIDBService_SetShareLockType_Call struct {
	*mock.Call
}

// SetShareLockType is a helper method to define mock.On call
//   - c context.Context
func (_e *MockIDBService_Expecter) SetShareLockType(c interface{}) *MockIDBService_SetShareLockType_Call {
	return &MockIDBService_SetShareLockType_Call{Call: _e.mock.On("SetShareLockType", c)}
}

func (_c *MockIDBService_SetShareLockType_Call) Run(run func(c context.Context)) *MockIDBService_SetShareLockType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIDBService_SetShareLockType_Call) Return(_a0 context.Context) *MockIDBService_SetShareLockType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDBService_SetShareLockType_Call) RunAndReturn(run func(context.Context) context.Context) *MockIDBService_SetShareLockType_Call {
	_c.Call.Return(run)
	return _c
}

// SetUpdateLockType provides a mock function with given fields: c
func (_m *MockIDBService) SetUpdateLockType(c context.Context) context.Context {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for SetUpdateLockType")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockIDBService_SetUpdateLockType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUpdateLockType'
type MockIDBService_SetUpdateLockType_Call struct {
	*mock.Call
}

// SetUpdateLockType is a helper method to define mock.On call
//   - c context.Context
func (_e *MockIDBService_Expecter) SetUpdateLockType(c interface{}) *MockIDBService_SetUpdateLockType_Call {
	return &MockIDBService_SetUpdateLockType_Call{Call: _e.mock.On("SetUpdateLockType", c)}
}

func (_c *MockIDBService_SetUpdateLockType_Call) Run(run func(c context.Context)) *MockIDBService_SetUpdateLockType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIDBService_SetUpdateLockType_Call) Return(_a0 context.Context) *MockIDBService_SetUpdateLockType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDBService_SetUpdateLockType_Call) RunAndReturn(run func(context.Context) context.Context) *MockIDBService_SetUpdateLockType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDBService creates a new instance of MockIDBService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDBService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDBService {
	mock := &MockIDBService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
