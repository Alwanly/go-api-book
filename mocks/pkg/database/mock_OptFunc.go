// Code generated by mockery v2.44.1. DO NOT EDIT.

package database

import (
	database "github.com/Alwanly/go-codebase/pkg/database"
	mock "github.com/stretchr/testify/mock"
)

// MockOptFunc is an autogenerated mock type for the OptFunc type
type MockOptFunc struct {
	mock.Mock
}

type MockOptFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOptFunc) EXPECT() *MockOptFunc_Expecter {
	return &MockOptFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: opts
func (_m *MockOptFunc) Execute(opts *database.DBServiceOpts) error {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*database.DBServiceOpts) error); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOptFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockOptFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - opts *database.DBServiceOpts
func (_e *MockOptFunc_Expecter) Execute(opts interface{}) *MockOptFunc_Execute_Call {
	return &MockOptFunc_Execute_Call{Call: _e.mock.On("Execute", opts)}
}

func (_c *MockOptFunc_Execute_Call) Run(run func(opts *database.DBServiceOpts)) *MockOptFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*database.DBServiceOpts))
	})
	return _c
}

func (_c *MockOptFunc_Execute_Call) Return(_a0 error) *MockOptFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOptFunc_Execute_Call) RunAndReturn(run func(*database.DBServiceOpts) error) *MockOptFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOptFunc creates a new instance of MockOptFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOptFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOptFunc {
	mock := &MockOptFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
