// Code generated by mockery v2.44.1. DO NOT EDIT.

package middleware

import (
	fiber "github.com/gofiber/fiber/v2"

	mock "github.com/stretchr/testify/mock"
)

// MockIAuthMiddleware is an autogenerated mock type for the IAuthMiddleware type
type MockIAuthMiddleware struct {
	mock.Mock
}

type MockIAuthMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthMiddleware) EXPECT() *MockIAuthMiddleware_Expecter {
	return &MockIAuthMiddleware_Expecter{mock: &_m.Mock}
}

// BasicAuth provides a mock function with given fields:
func (_m *MockIAuthMiddleware) BasicAuth() func(*fiber.Ctx) error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BasicAuth")
	}

	var r0 func(*fiber.Ctx) error
	if rf, ok := ret.Get(0).(func() func(*fiber.Ctx) error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*fiber.Ctx) error)
		}
	}

	return r0
}

// MockIAuthMiddleware_BasicAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BasicAuth'
type MockIAuthMiddleware_BasicAuth_Call struct {
	*mock.Call
}

// BasicAuth is a helper method to define mock.On call
func (_e *MockIAuthMiddleware_Expecter) BasicAuth() *MockIAuthMiddleware_BasicAuth_Call {
	return &MockIAuthMiddleware_BasicAuth_Call{Call: _e.mock.On("BasicAuth")}
}

func (_c *MockIAuthMiddleware_BasicAuth_Call) Run(run func()) *MockIAuthMiddleware_BasicAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAuthMiddleware_BasicAuth_Call) Return(_a0 func(*fiber.Ctx) error) *MockIAuthMiddleware_BasicAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthMiddleware_BasicAuth_Call) RunAndReturn(run func() func(*fiber.Ctx) error) *MockIAuthMiddleware_BasicAuth_Call {
	_c.Call.Return(run)
	return _c
}

// JwtAuth provides a mock function with given fields:
func (_m *MockIAuthMiddleware) JwtAuth() func(*fiber.Ctx) error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for JwtAuth")
	}

	var r0 func(*fiber.Ctx) error
	if rf, ok := ret.Get(0).(func() func(*fiber.Ctx) error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*fiber.Ctx) error)
		}
	}

	return r0
}

// MockIAuthMiddleware_JwtAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JwtAuth'
type MockIAuthMiddleware_JwtAuth_Call struct {
	*mock.Call
}

// JwtAuth is a helper method to define mock.On call
func (_e *MockIAuthMiddleware_Expecter) JwtAuth() *MockIAuthMiddleware_JwtAuth_Call {
	return &MockIAuthMiddleware_JwtAuth_Call{Call: _e.mock.On("JwtAuth")}
}

func (_c *MockIAuthMiddleware_JwtAuth_Call) Run(run func()) *MockIAuthMiddleware_JwtAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAuthMiddleware_JwtAuth_Call) Return(_a0 func(*fiber.Ctx) error) *MockIAuthMiddleware_JwtAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthMiddleware_JwtAuth_Call) RunAndReturn(run func() func(*fiber.Ctx) error) *MockIAuthMiddleware_JwtAuth_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthMiddleware creates a new instance of MockIAuthMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthMiddleware {
	mock := &MockIAuthMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
