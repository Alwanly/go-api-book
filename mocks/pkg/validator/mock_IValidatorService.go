// Code generated by mockery v2.44.1. DO NOT EDIT.

package validator

import (
	validator "github.com/Alwanly/go-codebase/pkg/validator"
	mock "github.com/stretchr/testify/mock"
)

// MockIValidatorService is an autogenerated mock type for the IValidatorService type
type MockIValidatorService struct {
	mock.Mock
}

type MockIValidatorService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIValidatorService) EXPECT() *MockIValidatorService_Expecter {
	return &MockIValidatorService_Expecter{mock: &_m.Mock}
}

// TranslateError provides a mock function with given fields: err
func (_m *MockIValidatorService) TranslateError(err error) []validator.ValidationError {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for TranslateError")
	}

	var r0 []validator.ValidationError
	if rf, ok := ret.Get(0).(func(error) []validator.ValidationError); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]validator.ValidationError)
		}
	}

	return r0
}

// MockIValidatorService_TranslateError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateError'
type MockIValidatorService_TranslateError_Call struct {
	*mock.Call
}

// TranslateError is a helper method to define mock.On call
//   - err error
func (_e *MockIValidatorService_Expecter) TranslateError(err interface{}) *MockIValidatorService_TranslateError_Call {
	return &MockIValidatorService_TranslateError_Call{Call: _e.mock.On("TranslateError", err)}
}

func (_c *MockIValidatorService_TranslateError_Call) Run(run func(err error)) *MockIValidatorService_TranslateError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockIValidatorService_TranslateError_Call) Return(_a0 []validator.ValidationError) *MockIValidatorService_TranslateError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIValidatorService_TranslateError_Call) RunAndReturn(run func(error) []validator.ValidationError) *MockIValidatorService_TranslateError_Call {
	_c.Call.Return(run)
	return _c
}

// TranslateToLocale provides a mock function with given fields: err, locale
func (_m *MockIValidatorService) TranslateToLocale(err error, locale string) []validator.ValidationError {
	ret := _m.Called(err, locale)

	if len(ret) == 0 {
		panic("no return value specified for TranslateToLocale")
	}

	var r0 []validator.ValidationError
	if rf, ok := ret.Get(0).(func(error, string) []validator.ValidationError); ok {
		r0 = rf(err, locale)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]validator.ValidationError)
		}
	}

	return r0
}

// MockIValidatorService_TranslateToLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateToLocale'
type MockIValidatorService_TranslateToLocale_Call struct {
	*mock.Call
}

// TranslateToLocale is a helper method to define mock.On call
//   - err error
//   - locale string
func (_e *MockIValidatorService_Expecter) TranslateToLocale(err interface{}, locale interface{}) *MockIValidatorService_TranslateToLocale_Call {
	return &MockIValidatorService_TranslateToLocale_Call{Call: _e.mock.On("TranslateToLocale", err, locale)}
}

func (_c *MockIValidatorService_TranslateToLocale_Call) Run(run func(err error, locale string)) *MockIValidatorService_TranslateToLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error), args[1].(string))
	})
	return _c
}

func (_c *MockIValidatorService_TranslateToLocale_Call) Return(_a0 []validator.ValidationError) *MockIValidatorService_TranslateToLocale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIValidatorService_TranslateToLocale_Call) RunAndReturn(run func(error, string) []validator.ValidationError) *MockIValidatorService_TranslateToLocale_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateStruct provides a mock function with given fields: input
func (_m *MockIValidatorService) ValidateStruct(input interface{}) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ValidateStruct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIValidatorService_ValidateStruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateStruct'
type MockIValidatorService_ValidateStruct_Call struct {
	*mock.Call
}

// ValidateStruct is a helper method to define mock.On call
//   - input interface{}
func (_e *MockIValidatorService_Expecter) ValidateStruct(input interface{}) *MockIValidatorService_ValidateStruct_Call {
	return &MockIValidatorService_ValidateStruct_Call{Call: _e.mock.On("ValidateStruct", input)}
}

func (_c *MockIValidatorService_ValidateStruct_Call) Run(run func(input interface{})) *MockIValidatorService_ValidateStruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockIValidatorService_ValidateStruct_Call) Return(_a0 error) *MockIValidatorService_ValidateStruct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIValidatorService_ValidateStruct_Call) RunAndReturn(run func(interface{}) error) *MockIValidatorService_ValidateStruct_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIValidatorService creates a new instance of MockIValidatorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIValidatorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIValidatorService {
	mock := &MockIValidatorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
